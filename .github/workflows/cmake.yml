name: CMake

on: [push, pull_request]

env:
  CMAKE_BUILD_TYPE: "Release"
  CCACHE_COMPRESS: 1

jobs:
  build:
    name: ${{ matrix.os }}-${{matrix.config.cc}}-${{matrix.qt}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        qt: ["qt5"]
        shiboken: ["2"]
        pyside: ["2"]
        python: ["3"]
        config:
        - {
            cc: "gcc-10", cxx: "g++-10",
            cmake_flags: "-DBUILD_FEM_NETGEN=ON",
            generator: "Unix Makefiles",
            compiler_cache: "ccache"
          }
        - {
            cc: "clang-10", cxx: "clang++-10",
            cmake_flags: "-DBUILD_FEM_NETGEN=ON",
            generator: "Unix Makefiles",
            compiler_cache: "ccache"
          }
        - {
            cc: "gcc", cxx: "g++",
            cmake_flags: "-DBUILD_FEM_NETGEN=ON",
            generator: "Unix Makefiles",
            compiler_cache: "ccache"
          }
        include:
        - os: ubuntu-16.04
          qt: "qt4"
          shiboken: ""
          pyside: ""
          python: ""
          config:
            {
              cc: "gcc", cxx: "g++",
              cmake_flags: "-DBUILD_FEM_NETGEN=ON",
              generator: "Unix Makefiles",
              compiler_cache: "ccache"
            }
        - os: windows-2016
          qt: "qt5"
          python: ""
          config:
            {
              cc: "cl", cxx: "cl",
              cmake_flags: "-DBUILD_FEM_NETGEN=ON -DFREECAD_RELEASE_PDB=OFF -DFREECAD_RELEASE_SEH=OFF -DFREECAD_USE_PCH=OFF",
              generator: "Ninja",
              compiler_cache: "buildcache"
            }
        - os: macos-10.15
          qt: "qt5"
          python: "3"
          config:
            {
              cc: "clang", cxx: "clang++",
              cmake_flags: "-DBUILD_FEM_NETGEN=ON",
              generator: "Ninja",
              compiler_cache: "ccache"
            }
       
    steps:
    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y%m%d%H%M")"
      shell: bash
      
    - name: Generate Matrix unique name
      id: matrix-name
      #if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "::set-output name=concat::${{ matrix.os }}-${{matrix.config.cc}}-${{matrix.qt}}"

    - name: Configure MSVC Command Prompt
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Set Environment Variables
      #if: runner.os == 'Linux' 
      shell: bash
      run: |
        echo "INSTALLED_APP_PATH=/usr/local/bin/FreeCAD" >> $GITHUB_ENV
        #https://forum.freecadweb.org/viewtopic.php?f=3&t=40677
        echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/netgen/:$LD_LIRBARY_PATH" >> $GITHUB_ENV
        ([ "${{matrix.qt}}" == "qt5" ] && echo 'BUILD_QT5=ON' || echo 'BUILD_QT5=OFF') >> $GITHUB_ENV
        
        #"${{matrix.python}}" != "" ] && echo "PYTHON_MAJOR_VERSION=${{matrix.python}}">> $GITHUB_ENV || true
        #Make cache folder (quotes for windows) if missing
        mkdir "~/${{matrix.config.compiler_cache}}" || true

    - name: Change Apt Cache permissions
      if: runner.os == 'Linux'
      run: |
        sudo chown -R $(whoami):$(id -ng) /var/cache/apt/archives

    - name: Cache Apt (Linux)
      if: runner.os == 'Linux' && false
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: /var/cache/apt/archives/*.deb
        key: ${{  steps.matrix-name.outputs.concat }}-cache-apt-${{ steps.get-date.outputs.date }}-${{ github.run_number }}
        restore-keys: |
          ${{  steps.matrix-name.outputs.concat }}-cache-apt-${{ steps.get-date.outputs.date }}-
          ${{  steps.matrix-name.outputs.concat }}-cache-apt-

    - name: Cache ${{matrix.config.compiler_cache}}
      if: matrix.config.compiler_cache != ''
      uses: actions/cache@master
      #if: runner.os == 'Linux' 
      with:
        path: |
          ${{ runner.workspace }}/${{matrix.config.compiler_cache}}
          !**/prgid
        key: ${{  steps.matrix-name.outputs.concat }}-cache-${{ steps.get-date.outputs.date }}-${{ github.run_number }}
        restore-keys: |
          ${{  steps.matrix-name.outputs.concat }}-cache-${{ steps.get-date.outputs.date }}-
          ${{  steps.matrix-name.outputs.concat }}-cache-

    - name: Install compiler ${{matrix.config.cc}} (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt-get install ${{matrix.config.cc}}  ${{matrix.config.cxx}}

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install ninja
        curl -L https://github.com/FreeCAD/FreeCAD/releases/download/0.19_pre/FreeCADLibs_12.1.6_x64_VC15.7z --output FreeCADLibs.7z
        7z x FreeCADLibs.7z -o"${{ runner.workspace }}\FreeCADLibs" > /dev/null
        rm -f FreeCADLibs.7z
        echo "FREECAD_LIBPACK_DIR=${{ runner.workspace }}\FreeCADLibs\FreeCADLibs_12.1.6_x64_VC15" >> $GITHUB_ENV
        echo "${{ runner.workspace }}\FreeCADLibs\FreeCADLibs_12.1.6_x64_VC15\bin" >> $GITHUB_PATH

        if [ "${{matrix.config.compiler_cache}}" == "buildcache" ]
        then
          curl -L https://github.com/mbitsnbites/buildcache/releases/download/v0.23.0/buildcache-win-msvc.zip --output buildcache.zip
          7z x buildcache.zip -o"${{ runner.workspace }}\buildcache-bin"  > /dev/null
          echo "${{ runner.workspace }}\buildcache-bin\buildcache\bin" >> $GITHUB_PATH
          echo "CMAKE_CXX_COMPILER_LAUNCHER=buildcache" >> $GITHUB_ENV
          echo "BUILDCACHE_DIR=${{ runner.workspace }}\buildcache" >> $GITHUB_ENV
          echo "BUILDCACHE_COMPRESS=$CCACHE_COMPRESS" >> $GITHUB_ENV
        fi
        ls -la "${{ runner.workspace }}\FreeCADLibs"
        ls -la "${{ runner.workspace }}\FreeCADLibs\FreeCADLibs_12.1.6_x64_VC15"

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-add-repository -y ppa:freecad-maintainers/freecad-daily 
        sudo apt-get update -qq
        # Build deps
        sudo apt-get install -y --no-install-recommends         \
                               python${{matrix.python}}-dev     \
                               python${{matrix.python}}-matplotlib \
                               python${{matrix.python}}-pivy    \
                               python${{matrix.python}}-ply     \
                               libboost-dev                     \
                               libboost-filesystem-dev          \
                               libboost-program-options-dev     \
                               libboost-python-dev              \
                               libboost-regex-dev               \
                               libboost-system-dev              \
                               libboost-thread-dev              \
                               libxerces-c-dev                  \
                               libocct-data-exchange-dev        \
                               libocct-ocaf-dev                 \
                               libocct-visualization-dev        \
                               libmedc-dev                      \
                               pybind11-dev                     \
                               swig                             \
                               libcoin-dev                      \
                               doxygen                          \
                               graphviz                         \
                               libnglib-dev                     \
                               netgen                           \
                               netgen-headers                   \
                               libmetis-dev                     \
                               libspnav-dev                     \
                               libshiboken${{matrix.shiboken}}-dev  \
                               shiboken${{matrix.shiboken}}     \
                               ccache

        if [[ $(lsb_release -rs) == "16.04" ]]; then 
          sudo apt-get install -y \
            libvtk6-dev
        else
          sudo apt-get install -y \
            libvtk7-dev
        fi

        ## Runtime deps
        ##sudo apt-get install -y --no-install-recommends freecad-daily-python3 python3-pivy python3-ply

        ## Use newer Eigen to suppress warnings
        ## https://github.com/FreeCAD/FreeCAD/pull/3485
        #wget http://mirrors.kernel.org/ubuntu/pool/universe/e/eigen3/libeigen3-dev_3.3.7-2_all.deb
        #sudo dpkg -i libeigen3-dev_3.3.7-2_all.deb
        ##export DISPLAY=:99.0
        ##sh -e /etc/init.d/xvfb start

        #export INSTALLED_APP_PATH="/usr/local/bin/FreeCAD"
        #echo "INSTALLED_APP_PATH=/usr/local/bin/FreeCAD" >> $GITHUB_ENV

        #export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/netgen/:$LD_LIRBARY_PATH
        #echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/netgen/:$LD_LIRBARY_PATH" >> $GITHUB_ENV
        #echo "DISPLAY=:99.0" >> $GITHUB_ENV

        if [ "${{matrix.config.compiler_cache}}" == "ccache" ]
        then
          (rm -rf ~/.ccache  && ln -s ${{ runner.workspace }}/ccache ~/.ccache )|| true
          ls -la ${{ runner.workspace }}/ccache || true
           echo "CCACHE_DIR=${{ runner.workspace }}/${{matrix.config.compiler_cache}}" >> $GITHUB_ENV
        fi

    - name: Install QT4 (Linux)
      if: runner.os == 'Linux' && matrix.qt == 'qt4'
      run: |
        sudo apt-get install -y --no-install-recommends          \
        qt4-qmake                        \
        libqt4-opengl-dev                \
        libqtwebkit-dev                  \
        libpyside-dev                    \
        pyside${{matrix.pyside}}-tools    \
        python${{matrix.python}}-pyside  \
        python${{matrix.python}}-qt4

    - name: Install QT5 (Linux)
      if: runner.os == 'Linux' && matrix.qt == 'qt5' && matrix.os != 'ubuntu-16.04'
      run: |
        sudo apt-get install -y --no-install-recommends          \
        qt5-qmake                        \
        libqt5xmlpatterns5-dev           \
        libqt5svg5-dev                   \
        libqt5opengl5-dev                \
        qttools5-dev                     \
        qtwebengine5-dev                 \
        qtbase5-dev                      \
        libpyside${{matrix.pyside}}-dev  \
        pyside${{matrix.pyside}}-tools   \
        python${{matrix.python}}-pyside${{matrix.pyside}}.qtopengl \
        pyqt5-dev-tools

    - name: Install QT5 - Ubuntu 16.04 (Linux)
      if: matrix.qt == 'qt5' && matrix.os == 'ubuntu-16.04'
      run: |
        sudo apt-get install -y --no-install-recommends          \
        qt5-qmake                        \
        libqt5xmlpatterns5-dev           \
        libqt5svg5-dev                   \
        libqt5opengl5-dev                \
        qttools5-dev                     \
        libqt5webkit5-dev                \
        qtbase5-dev                      \
        libpyside${{matrix.pyside}}-dev  \
        pyside${{matrix.pyside}}-tools   \
        python${{matrix.python}}-pyside${{matrix.pyside}} \
        pyqt5-dev-tools

    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew tap FreeCAD/freecad
        brew install ccache coreutils boost ninja xerces-c
        brew install freecad/freecad/coin 
        brew install freecad/freecad/nglib
        brew install freecad/freecad/med-file
        brew install freecad/freecad/opencamlib
        brew install freecad/freecad/shiboken2
        brew install freecad/freecad/pyside2
        brew install freecad/freecad/pyside2-tools
        brew install freecad/freecad/pivy
        brew install freecad/freecad/matplotlib

        if [ "${{matrix.config.compiler_cache}}" == "ccache" ]
        then
          (rm -rf ~/.ccache  && ln -s ${{ runner.workspace }}/ccache ~/.ccache )|| true
          ls -la ${{ runner.workspace }}/ccache || true
           echo "CCACHE_DIR=${{ runner.workspace }}/${{matrix.config.compiler_cache}}" >> $GITHUB_ENV
        fi

    - name: Checkout 
      uses: actions/checkout@v2

    - name: Configure
      shell: bash
      run: |
        mkdir "${{ runner.workspace }}/build" && cd "${{ runner.workspace }}/build"

        CMAKE_FREECAD_LIB_ARGS=""

        [ "$FREECAD_LIBPACK_DIR" != "" ] && \
        CMAKE_FREECAD_LIB_ARGS="-DFREECAD_LIBPACK_DIR=$FREECAD_LIBPACK_DIR" || true

        PYTHON_ARGS="-DPYTHON_EXECUTABLE=$(which python${{matrix.python}})"

        CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} \
        cmake $GITHUB_WORKSPACE -Wno-dev -G"${{matrix.config.generator}}" \
        ${{matrix.config.cmake_flags}} $CMAKE_FREECAD_LIB_ARGS \
        $PYTHON_ARGS \
        -DCMAKE_INSTALL_PREFIX:PATH="${{ runner.workspace }}/install" \
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_QT5=${BUILD_QT5} ../

    - name: Build and install using CMake
      #if: runner.os == 'Windows'
      shell: bash
      run: |
        cd "${{ runner.workspace }}/build"
        if [ "${{matrix.config.compiler_cache}}" != "" ]
        then
          #${{matrix.config.compiler_cache}} --show-config
          ${{matrix.config.compiler_cache}} -z -M 400M
          #ls -Rla "${{ runner.workspace }}/${{matrix.config.compiler_cache}}"
        fi
          echo "::group::Run cmake build"
          cmake --build ./ --target FreeCADBase 
          echo "::endgroup::"

        if [ "${{matrix.config.compiler_cache}}" != "" ]
        then
          echo "::group::cache statistics"
          ${{matrix.config.compiler_cache}} -s
          echo "::endgroup::"
          #ls -Rla "${{ runner.workspace }}/${{matrix.config.compiler_cache}}"
        fi
        ls -la "${{ runner.workspace }}"

        echo "::group::Run cmake install"
        cmake --install ./ || true
        echo "::endgroup::"

    - name: Install and Test (Linux)
      if: runner.os == 'LinuxDISABLED'
      run: |

        export N=$(($(grep -c ^processor /proc/cpuinfo) + 1))
        cd ${{ runner.workspace }}/build
        # Stop compiling (GCC) after 2 hrs 50 min (3 hrs limit).
        # Preserves created ccache for the next build job.
        # if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo timeout -k 175m 170m make -j2 install || true; fi
        # if [ "${TRAVIS_OS_NAME}" == "osx" ]; then sudo gtimeout -s KILL  make -j2 install; fi
        #cat $HOME/.ccache/ccache.conf
        ccache -z -s -M 400M
        df -h
        #if [ "${TRAVIS_OS_NAME}" == "osx" ]; then export PATH="/usr/local/opt/ccacche/libexec:$PATH"; sudo gtimeout -s KILL 7200 make -j2; [ $? == 124 ] && { ccache -s; return 0; }  fi 
        #if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo timeout -k 175m 170m make -j2 install || true; fi
        #sudo make -j${N} install
        #make -j${N} Part
        echo "::group::Run cmake"
        sudo cmake --build ./ --target FreeCADBase -j ${N}
        echo "::endgroup::"
        echo "::group::ccache statistics"
        ccache -s
        ls -la $CCACHE_DIR
        ls -la ~/.ccache
        echo "::endgroup::"
        #make clean
        #cmake --build ./ --target FreeCADBase  -j ${N}
        #ccache -s
        echo "FreeCAD installed bin:" ${INSTALLED_APP_PATH}
        echo "::group::Run tests"
        ${INSTALLED_APP_PATH} --console --run-test 0
        echo "::endgroup::"
        echo "::warning::Tests Completed"
        xvfb-run --auto-servernum ${INSTALLED_APP_PATH} --log-file /tmp/FreeCAD_installed.log &
        sleep 10 && pkill FreeCAD
        cat /tmp/FreeCAD_installed.log
        grep --file=${{ runner.workspace }}/.log_errors /tmp/FreeCAD_installed.log ; [ $? == 1 ] && \
        echo "No errors from .log_errors file found in the log after start from /usr/local/bin" || \
        ( echo "::warning::Error from .log_errors found!" && false )
